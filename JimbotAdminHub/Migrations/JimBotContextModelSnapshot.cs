// <auto-generated />
using System;
using JimbotAdminHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JimbotAdminHub.Migrations
{
    [DbContext(typeof(JimBotContext))]
    partial class JimBotContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DutchTreat.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("OrderNumber");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DutchTreat.Data.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrderId");

                    b.Property<int?>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("DutchTreat.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArtDating");

                    b.Property<string>("ArtDescription");

                    b.Property<string>("ArtId");

                    b.Property<string>("Artist");

                    b.Property<DateTime>("ArtistBirthDate");

                    b.Property<DateTime>("ArtistDeathDate");

                    b.Property<string>("ArtistNationality");

                    b.Property<string>("Category");

                    b.Property<decimal>("Price");

                    b.Property<string>("Size");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.App.GPSLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Lat");

                    b.Property<double>("Long");

                    b.HasKey("Id");

                    b.ToTable("GPSLocation");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.Bot.BotPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar");

                    b.Property<double>("Battery");

                    b.Property<string>("PartName");

                    b.Property<int>("PartPrice");

                    b.Property<double>("Quality");

                    b.Property<int?>("ShopId");

                    b.Property<double>("Speed");

                    b.Property<double>("Strength");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("BotParts");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.Bot.PartTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BotPartId");

                    b.Property<bool>("Chest");

                    b.Property<bool>("HeadBand");

                    b.Property<bool>("Helmet");

                    b.Property<bool>("LeftArm");

                    b.Property<bool>("LeftFoot");

                    b.Property<bool>("LeftHand");

                    b.Property<bool>("LeftKnee");

                    b.Property<bool>("LeftLeg");

                    b.Property<bool>("LeftWrist");

                    b.Property<bool>("Mask");

                    b.Property<bool>("Necklace");

                    b.Property<bool>("RightArm");

                    b.Property<bool>("RightFoot");

                    b.Property<bool>("RightHand");

                    b.Property<bool>("RightKnee");

                    b.Property<bool>("RightLeg");

                    b.Property<bool>("RightWrist");

                    b.HasKey("Id");

                    b.HasIndex("BotPartId");

                    b.ToTable("PartTypes");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.Challenge.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChallengeName");

                    b.Property<int>("ChallengePoints");

                    b.Property<string>("Description");

                    b.Property<DateTime>("ExpireTime");

                    b.Property<string>("Photo");

                    b.HasKey("Id");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.Challenge.ChallengeLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Advance");

                    b.Property<bool>("Beginner");

                    b.Property<int>("ChallengeId");

                    b.Property<int?>("ChallengeProfileId");

                    b.Property<bool>("Cyborg");

                    b.Property<bool>("Intermediate");

                    b.Property<bool>("Master");

                    b.Property<bool>("Professional");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("ChallengeProfileId");

                    b.ToTable("ChallengeLevels");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.Challenge.ChallengeTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChallengeId");

                    b.Property<int?>("ChallengeProfileId");

                    b.Property<bool>("Chase");

                    b.Property<bool>("Daily");

                    b.Property<bool>("Landmark");

                    b.Property<bool>("Monthly");

                    b.Property<bool>("Race");

                    b.Property<bool>("Relay");

                    b.Property<bool>("Search");

                    b.Property<bool>("Single");

                    b.Property<bool>("Step");

                    b.Property<bool>("Team");

                    b.Property<bool>("Weekly");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("ChallengeProfileId");

                    b.ToTable("ChallengeTypes");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.Shop.PaymentAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("PaymentAccounts");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.Shop.PaymentOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Card");

                    b.Property<bool>("PayPal");

                    b.Property<int>("PaymentAccountId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentAccountId")
                        .IsUnique();

                    b.ToTable("PaymentOptions");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.Shop.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ShopLocationId");

                    b.HasKey("Id");

                    b.HasIndex("ShopLocationId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.Shop.ShopType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BotShop");

                    b.Property<bool>("BusinessShop");

                    b.Property<bool>("ChargeStation");

                    b.Property<bool>("GymShop");

                    b.Property<bool>("MainShop");

                    b.Property<int>("ShopId");

                    b.HasKey("Id");

                    b.HasIndex("ShopId")
                        .IsUnique();

                    b.ToTable("ShopTypes");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.User.Activities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Biking");

                    b.Property<int?>("HealthProfileId");

                    b.Property<bool>("Running");

                    b.Property<bool>("Skating");

                    b.Property<int>("UserId");

                    b.Property<string>("UserId1");

                    b.Property<bool>("Walking");

                    b.Property<bool>("WeightLifting");

                    b.HasKey("Id");

                    b.HasIndex("HealthProfileId");

                    b.HasIndex("UserId1");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.User.BotProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Chest");

                    b.Property<int>("HeadBand");

                    b.Property<int>("Helmet");

                    b.Property<int>("LeftArm");

                    b.Property<int>("LeftFoot");

                    b.Property<int>("LeftHand");

                    b.Property<int>("LeftKnee");

                    b.Property<int>("LeftLeg");

                    b.Property<int>("LeftWrist");

                    b.Property<int>("Mask");

                    b.Property<int>("Necklace");

                    b.Property<int>("RightArm");

                    b.Property<int>("RightFoot");

                    b.Property<int>("RightHand");

                    b.Property<int>("RightKnee");

                    b.Property<int>("RightLeg");

                    b.Property<int>("RightWrist");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("BotProfiles");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.User.ChallengeProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChallengePoints");

                    b.Property<int>("ChallengesCompleted");

                    b.Property<int>("ChallengesFailed");

                    b.Property<int>("TotalChallengePoints");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("ChallengeProfiles");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.User.Feed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Feeds");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.User.HealthProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChallengePoints");

                    b.Property<double>("Height");

                    b.Property<double>("TargetHeartRate");

                    b.Property<double>("TargetWeight");

                    b.Property<int>("UserId");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.ToTable("HealthProfiles");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.User.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Avatar");

                    b.Property<string>("BotAvatar");

                    b.Property<int?>("BotProfileId");

                    b.Property<int?>("ChallengeProfileId");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("FeedId");

                    b.Property<string>("FirstName");

                    b.Property<int?>("HealthProfileId");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Sex");

                    b.Property<string>("State");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("BotProfileId");

                    b.HasIndex("ChallengeProfileId");

                    b.HasIndex("FeedId");

                    b.HasIndex("HealthProfileId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DutchTreat.Data.Entities.OrderItem", b =>
                {
                    b.HasOne("DutchTreat.Data.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId");

                    b.HasOne("DutchTreat.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.Bot.BotPart", b =>
                {
                    b.HasOne("JimbotAdminHub.Data.Entities.Shop.Shop")
                        .WithMany("Inventory")
                        .HasForeignKey("ShopId");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.Bot.PartTypes", b =>
                {
                    b.HasOne("JimbotAdminHub.Data.Entities.Bot.BotPart")
                        .WithMany("PartType")
                        .HasForeignKey("BotPartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.Challenge.ChallengeLevel", b =>
                {
                    b.HasOne("JimbotAdminHub.Data.Entities.Challenge.Challenge")
                        .WithMany("ChallengeLevel")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JimbotAdminHub.Data.Entities.User.ChallengeProfile")
                        .WithMany("ChallengeLevel")
                        .HasForeignKey("ChallengeProfileId");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.Challenge.ChallengeTypes", b =>
                {
                    b.HasOne("JimbotAdminHub.Data.Entities.Challenge.Challenge")
                        .WithMany("ChallengeType")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JimbotAdminHub.Data.Entities.User.ChallengeProfile")
                        .WithMany("ChallengeType")
                        .HasForeignKey("ChallengeProfileId");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.Shop.PaymentOptions", b =>
                {
                    b.HasOne("JimbotAdminHub.Data.Entities.Shop.PaymentAccount")
                        .WithOne("PaymentOptions")
                        .HasForeignKey("JimbotAdminHub.Data.Entities.Shop.PaymentOptions", "PaymentAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.Shop.Shop", b =>
                {
                    b.HasOne("JimbotAdminHub.Data.Entities.App.GPSLocation", "ShopLocation")
                        .WithMany()
                        .HasForeignKey("ShopLocationId");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.Shop.ShopType", b =>
                {
                    b.HasOne("JimbotAdminHub.Data.Entities.Shop.Shop")
                        .WithOne("ShopType")
                        .HasForeignKey("JimbotAdminHub.Data.Entities.Shop.ShopType", "ShopId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.User.Activities", b =>
                {
                    b.HasOne("JimbotAdminHub.Data.Entities.User.HealthProfile")
                        .WithMany("Activities")
                        .HasForeignKey("HealthProfileId");

                    b.HasOne("JimbotAdminHub.Data.Entities.User.User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("JimbotAdminHub.Data.Entities.User.User", b =>
                {
                    b.HasOne("JimbotAdminHub.Data.Entities.User.BotProfile", "BotProfile")
                        .WithMany()
                        .HasForeignKey("BotProfileId");

                    b.HasOne("JimbotAdminHub.Data.Entities.User.ChallengeProfile", "ChallengeProfile")
                        .WithMany()
                        .HasForeignKey("ChallengeProfileId");

                    b.HasOne("JimbotAdminHub.Data.Entities.User.Feed", "Feed")
                        .WithMany()
                        .HasForeignKey("FeedId");

                    b.HasOne("JimbotAdminHub.Data.Entities.User.HealthProfile", "HealthProfile")
                        .WithMany()
                        .HasForeignKey("HealthProfileId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JimbotAdminHub.Data.Entities.User.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JimbotAdminHub.Data.Entities.User.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JimbotAdminHub.Data.Entities.User.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JimbotAdminHub.Data.Entities.User.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
